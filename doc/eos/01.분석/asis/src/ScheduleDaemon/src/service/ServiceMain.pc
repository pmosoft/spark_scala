/**
 *******************************************************************************
 * @brief  ScheduleDaemon의 요청에 대해 업무구분코드와 전문종별코드에 해당하는 서비스를 호출한다.
 *         업무구분코드와 전문종별코드는 해당문서를 참고
 * @remark
 * @code
 * 1. ./config/test.conf 로 설정파일을 생성. 아래는 설정파일 내용
 *    log_directory = ${HOME}/log
 *
 * 2. 프로그램 시작시 설정파일 초기화
 *    cfg_loadConfig("./config/test.conf");
 *
 * 3. 설정값을 꺼냄
 *    char *logDirectory = cfg_getString("log_directory");
 *    printf("로그경로 = [%s] \n", logDirectory);
 *    출력결과 = {your home directory}/log
 *
 * 4. 프로그램 종료시 로딩된 설정내용 메모리 해제
 *    cfg_closeConfig();
 * @endcode
 * @file   ServiceMain.c
 * @date   2012.12.01
 * @author Ysic
 *******************************************************************************
 */
EXEC SQL INCLUDE SQLCA;
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "common.h"
#include "packet.h"
EXEC SQL INCLUDE "db_table.h";

/**
 * Function prototype
 */
int getServerInfo(struct ST_SERVER *st_server);
int getAnalysisWeight(struct ST_ANALYSIS_WEIGHT *st_analysis_weight);
int selectBinCount(int scenario_id, int *bin_count, int *bin_x_count, int *bin_y_count);
int selectRuCount(int scenario_id, int *ru_count);
int computeAnalysisKind(int scenario_id, int *kind_weight);
int getServerStatus(struct ST_SERVER *st_server);
int update_schedule(int schedule_id, char *server_id, int ru_count, int bin_x_count, int bin_y_count, int analysis_weight);
int selectAnalysisServer(int schedule_id, int scenario_id, struct ST_ANALYSIS_WEIGHT *st_analysis_weight, struct ST_SERVER *st_server, int is_fixed);
int procSchedule(struct ST_SERVER *st_server, struct ST_ANALYSIS_WEIGHT *st_analysis_weight);
int lf_updateScheduleProcessCode(int schedule_id, const char *processCd, const char *processMsg);
void makeInCommon(struct IO_COMMON *inCommon
                 ,int length
                 ,const char *tx_code
                 ,const char *tx_type
                 ,char *user_id);
int getExistedResultServer(int schedule_id, struct ST_SERVER *st_server);

/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief 환경설정 파일에서 분석서버 정보를 읽어 온다.
 */
int getServerInfo(struct ST_SERVER *st_server)
{
    int  i, cpu_weight, mem_weight;
    char szServer_id   [ 50];
    char szServer_ip   [ 50];
    char szServer_port [ 50];
    char szCpu_grade   [ 50];
    char szMem_grade   [ 50];
    char szRead_only   [ 50];
    char szInbuild_only[ 50];

    // Analysis Server 관련 정보 조회
    cpu_weight = cfg_getInt("cpu_weight");
    mem_weight = cfg_getInt("mem_weight");

    st_server->server_cnt = cfg_getInt("analysis_server_count");

    for(i=0; i<st_server->server_cnt; i++)
    {
        sprintf(szServer_id   , "analysis_server_id_%d"   , i+1);
        sprintf(szServer_ip   , "analysis_server_ip_%d"   , i+1);
        sprintf(szServer_port , "analysis_server_port_%d" , i+1);
        sprintf(szCpu_grade   , "analysis_cpu_grade_%d"   , i+1);
        sprintf(szMem_grade   , "analysis_mem_grade_%d"   , i+1);
        sprintf(szRead_only   , "analysis_read_only_%d"   , i+1);	// by isjo 2014-02-21

        strcpy(st_server->server_id[i]  , cfg_getString(szServer_id ));  // 서버 ID
        strcpy(st_server->server_ip[i]  , cfg_getString(szServer_ip ));  // 서버 접속 IP
        st_server->server_port[i]       = cfg_getInt(szServer_port  ) ;  // 서버 접속 Port
        st_server->cpu_grade[i]         = cfg_getInt(szCpu_grade    ) ;  // 서버 CPU 수준
        st_server->mem_grade[i]         = cfg_getInt(szMem_grade    ) ;  // 서버 Memory 수준

        st_server->server_grade[i]      = st_server->cpu_grade[i] * cpu_weight + st_server->mem_grade[i] * mem_weight;
        
        // 신규분석은 하지 않고 분석된 결과를 읽어와서 데이터 처리(geometry, 2d-profile등) by isjo 2014-02-21
        st_server->read_only[i]         = cfg_getInt(szRead_only    ) ;
    }

printf("analysis_server_count = %d\n", st_server->server_cnt);
for(i=0; i<st_server->server_cnt; i++)
{
    printf("st_server->server_id[%d] = %s\n"  , i, st_server->server_id[i]);
    printf("st_server->server_ip[%d] = %s\n"  , i, st_server->server_ip[i]);
    printf("st_server->server_port[%d] = %d\n", i, st_server->server_port[i]);
    printf("st_server->cpu_grade[%d] = %d\n"  , i, st_server->cpu_grade[i]);
    printf("st_server->mem_grade[%d] = %d\n"  , i, st_server->mem_grade[i]);
    printf("st_server->server_grade[%d] = %d\n"  , i, st_server->server_grade[i]);
    printf("st_server->read_only[%d] = %d\n", i, st_server->read_only[i]); // by isjo 2014-02-21
}
    return 0;
}

/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief SCHEDULE테이블을 읽어 현재 수행할 일에 대한 처리를 한다.
 * 하루전 ~ 현재까지만 처리 한다.
 */
int getAnalysisWeight(struct ST_ANALYSIS_WEIGHT *st_analysis_weight)
{
    st_analysis_weight->ru_unit     = cfg_getInt("ru_unit"    ) ;  // RU 수량 단위
    st_analysis_weight->ru_weight   = cfg_getInt("ru_weight"  ) ;  // RU 수량 가중치
    st_analysis_weight->bin_unit    = cfg_getInt("bin_unit"   ) ;  // BIN 단위
    st_analysis_weight->bin_weight  = cfg_getInt("bin_weight" ) ;  // BIN 수량
    
printf("st_analysis_weight->ru_unit = %d\n", st_analysis_weight->ru_unit);
printf("st_analysis_weight->ru_weight = %d\n", st_analysis_weight->ru_weight);
printf("st_analysis_weight->bin_unit = %d\n", st_analysis_weight->bin_unit);
printf("st_analysis_weight->bin_weight = %d\n", st_analysis_weight->bin_weight);
    return 0;
}

/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief Bin 개수 확인
 */
int selectBinCount(int scenario_id, int *bin_count, int *bin_x_count, int *bin_y_count)
{
    EXEC SQL BEGIN DECLARE SECTION;
        int     szRU_COUNT      ;
        int     szSCENARIO_ID   ;

        int     nResolution   ;
        double  dStartX       ;
        double  dStartY       ;
        double  dEndX         ;
        double  dEndY         ;
    EXEC SQL END DECLARE SECTION;

    int nStartX, nStartY, nEndX, nEndY, nWidth, nHeight, no_Block_W, no_Block_H;

    szSCENARIO_ID = scenario_id;

    EXEC SQL
        select nvl(RESOLUTION  ,  10),
               nvl(TM_STARTX      , 0.0),			// TM좌표를 읽어오자 by isjo 2014-11-25
               nvl(TM_STARTY      , 0.0),
               nvl(TM_ENDX        , 0.0),
               nvl(TM_ENDY        , 0.0)
          into :nResolution       ,
               :dStartX           ,
               :dStartY           ,
               :dEndX             ,
               :dEndY
          from SCENARIO
         where SCENARIO_ID  = :szSCENARIO_ID
        ;

    if(SQLCODE != SQLSUCCESS)
    {
        log_error(__FFILE__, __FFUNC__, __LINE__, "SQLCODE = [%d]", SQLCODE);
        return FAIL;
    }

    nStartX = (int)dStartX;
    nStartY = (int)dStartY;
    nEndX   = (int)dEndX;
    nEndY   = (int)dEndY;

    if(nResolution == 0) nResolution = 10;

    nWidth = nEndX - nStartX;
    nHeight = nEndY - nStartY;
    no_Block_W = nWidth / nResolution;
    no_Block_H = nHeight / nResolution;

    if( nWidth % nResolution )
        nEndX = nResolution * ( no_Block_W + 1 ) + nStartX;
    else
        nEndX = nResolution * no_Block_W + nStartX;

    if( nHeight % nResolution )
        nEndY = nResolution * ( no_Block_H + 1 ) + nStartY;
    else
        nEndY = nResolution * no_Block_H + nStartY;

    *bin_x_count = (int)( nEndX - nStartX ) / nResolution;
    *bin_y_count = (int)( nEndY - nStartY ) / nResolution;
    *bin_count = (*bin_x_count) * (*bin_y_count);

/*
    log_debug(__FFILE__, __FFUNC__, __LINE__, "nStartX       [%d]", nStartX     );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "nStartY       [%d]", nStartY     );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "nEndX         [%d]", nEndX       );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "nEndY         [%d]", nEndY       );

    log_debug(__FFILE__, __FFUNC__, __LINE__, "no_Block_W    [%d]", no_Block_W  );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "no_Block_H    [%d]", no_Block_H  );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "bin_count     [%d]", *bin_count  );
*/
    return 0;
}

/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief RU 개수 확인
 */
int selectRuCount(int scenario_id, int *ru_count)
{
    EXEC SQL BEGIN DECLARE SECTION;
        int     szRU_COUNT      ;
        int     szSCENARIO_ID   ;
    EXEC SQL END DECLARE SECTION;

    szSCENARIO_ID = scenario_id;

    // YSIC 해당 쿼리는 아래 소스와 동일하니, 변경시 같이 변경해 줘야함
    // AnalysisModule => CellPLANCommon/Analysis/CDBSite.cpp
    // AnalysisModule => CellPLANCommon/Analysis/CDBSector.cpp
    EXEC SQL
        select count(*)
          into :szRU_COUNT
          from SCENARIO T_SCENARIO
              ,DU       T_DU
              ,SITE     T_SITE
              ,(select SCENARIO_ID
                      ,ENB_ID
                      ,PCI
                      ,PCI_PORT
                      ,RU_ID
                      ,max(MAKER) as MAKER
                      ,max(REPEATERATTENUATION) as REPEATERATTENUATION
                      ,max(REPEATERPWRRATIO) as REPEATERPWRRATIO
                      ,max(RU_SEQ) as RU_SEQ
                 from RU
                where SCENARIO_ID = :szSCENARIO_ID
                group by SCENARIO_ID, ENB_ID, PCI
                        ,PCI_PORT, RU_ID
               ) T_RU
         where T_DU.SCENARIO_ID       = T_SCENARIO.SCENARIO_ID
           and T_DU.SCENARIO_ID       = T_RU.SCENARIO_ID
           and T_DU.ENB_ID            = T_RU.ENB_ID
           and T_RU.SCENARIO_ID       = T_SITE.SCENARIO_ID
           and T_RU.ENB_ID            = T_SITE.ENB_ID
           and T_RU.PCI               = T_SITE.PCI
           and T_RU.PCI_PORT          = T_SITE.PCI_PORT
           and T_RU.RU_ID             = T_SITE.RU_ID
           and T_SITE.TYPE            in ('RU', 'RU_N')
           and T_SITE.STATUS          = 1
           and T_SCENARIO.SCENARIO_ID =  :szSCENARIO_ID
         order by T_RU.ENB_ID, T_RU.PCI, T_RU.PCI_PORT, T_RU.RU_ID
    ;

    if(SQLCODE != SQLSUCCESS)
    {
        log_error(__FFILE__, __FFUNC__, __LINE__, "SQLCODE = [%d]", SQLCODE);
        return FAIL;
    }

    *ru_count = szRU_COUNT;

    log_debug(__FFILE__, __FFUNC__, __LINE__, "szRU_COUNT   [%d]", *ru_count );

    return 0;
}

/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief 요청된 분석 요청에 대한 기능 가중치 계산
 */
int computeAnalysisKind(int scenario_id, int *kind_weight)
{
    EXEC SQL BEGIN DECLARE SECTION;
        int     szSCENARIO_ID   ;
        int     szPATHLOSS      ;
        int     szBESTSERVER    ;
        int     szRSRP          ;
        int     szRSRQ          ;
        int     szRSSI          ;
        int     szSINR          ;
        int     szHANDOVER      ;
        int     szTHROUGHPUT    ;
    EXEC SQL END DECLARE SECTION;

    szSCENARIO_ID = scenario_id;

    EXEC SQL
        select nvl(PATHLOSS     , 0),
               nvl(BESTSERVER   , 0),
               nvl(RSRP         , 0),
               nvl(RSRQ         , 0),
               nvl(RSSI         , 0),
               nvl(SINR         , 0),
               nvl(HANDOVER     , 0),
               nvl(THROUGHPUT   , 0)
          into :szPATHLOSS          ,
               :szBESTSERVER        ,
               :szRSRP              ,
               :szRSRQ              ,
               :szRSSI              ,
               :szSINR              ,
               :szHANDOVER          ,
               :szTHROUGHPUT
          from ANALYSIS_LIST
         where SCENARIO_ID = :szSCENARIO_ID
        ;

    if(SQLCODE != SQLSUCCESS)
    {
        log_error(__FFILE__, __FFUNC__, __LINE__, "SQLCODE = [%d]", SQLCODE);
        return FAIL;
    }

    log_debug(__FFILE__, __FFUNC__, __LINE__, "PATHLOSS   [%d]", szPATHLOSS   );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "BESTSERVER [%d]", szBESTSERVER );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "RSRP       [%d]", szRSRP       );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "RSRQ       [%d]", szRSRQ       );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "RSSI       [%d]", szRSSI       );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "SINR       [%d]", szSINR       );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "HANDOVER   [%d]", szHANDOVER   );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "THROUGHPUT [%d]", szTHROUGHPUT );

    if(szPATHLOSS   == 1)  *kind_weight = 1;
    if(szBESTSERVER == 1)  *kind_weight = 2;
    if(szRSRP       == 1)  *kind_weight = 3;
    if(szRSRQ       == 1)  *kind_weight = 5;
    if(szRSSI       == 1)  *kind_weight = 2;
    if(szSINR       == 1)  *kind_weight = 3;
    if(szHANDOVER   == 1)  *kind_weight = 4;
    if(szTHROUGHPUT == 1)  *kind_weight = 4;

    return 0;
}

/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief 요청된 분석 요청에 대한 서버 상태 확인
 */
int getServerStatus(struct ST_SERVER *st_server)
{
    EXEC SQL BEGIN DECLARE SECTION;
        int     szSCHEDULE_COUNT       ;
        int     szANALYSIS_WEIGHT      ;
        varchar szSERVER_ID    [ 10 +1];
    EXEC SQL END DECLARE SECTION;

    int i;

    for(i=0; i<st_server->server_cnt; i++)
    {
        memset(szSERVER_ID.arr , 0x00 , sizeof(szSERVER_ID.arr));
        memcpy(szSERVER_ID.arr , st_server->server_id[i], strlen(st_server->server_id[i]));
        szSERVER_ID.len = strlen(st_server->server_id[i]);
/*
        EXEC SQL
            select nvl(count(A.ANALYSIS_WEIGHT) , 0) ,
                   nvl(sum(A.ANALYSIS_WEIGHT)   , 0)
              into :szSCHEDULE_COUNT                 ,
                   :szANALYSIS_WEIGHT
              from SCENARIO A, SCHEDULE B
             where A.SCENARIO_ID = B.SCENARIO_ID
               and A.SERVER_ID   = :szSERVER_ID
               and B.PROCESS_CD  = '10003'
             group by A.SERVER_ID
            ;
*/
        EXEC SQL
            select nvl(count(ANALYSIS_WEIGHT) , 0) ,
                   nvl(sum(ANALYSIS_WEIGHT)   , 0)
              into :szSCHEDULE_COUNT               ,
                   :szANALYSIS_WEIGHT
              from SCHEDULE
             where SERVER_ID   = :szSERVER_ID
               and TYPE_CD in ('SC001', 'SC002', 'SC022', 'SC003', 'SC005', 'SC007', 'SC101', 'SC104', 'SC107', /*'SC704',*/ 
               'SC501', 'SC201', 'SC204', 'SC250', 'SC251', 'SC254', 'SC301', 'SC021', 'SC004')
               and PROCESS_CD  in ('10003', '10002')	// schedule 분석 요청 중일 경우도 넣어야 함 by isjo 2013-10-23
             group by SERVER_ID
            ;

        if(SQLCODE == SQLNOTFOUND)
        {
            st_server->schedule_count[i] = 0;
            st_server->total_weight[i]   = 0;
        }
        else if(SQLCODE != SQLSUCCESS)
        {
            log_error(__FFILE__, __FFUNC__, __LINE__, "SQLCODE = [%d]", SQLCODE);
            return SQLCODE;
        }
        else
        {
            st_server->schedule_count[i] = szSCHEDULE_COUNT  ;
            st_server->total_weight[i]   = szANALYSIS_WEIGHT ;
        }
        log_debug(__FFILE__, __FFUNC__, __LINE__, "szSERVER_ID        [%s]", szSERVER_ID.arr              );
        log_debug(__FFILE__, __FFUNC__, __LINE__, "szSCHEDULE_COUNT   [%d]", st_server->schedule_count[i] );
        log_debug(__FFILE__, __FFUNC__, __LINE__, "szANALYSIS_WEIGHT  [%d]", st_server->total_weight[i]   );
    }

    return 0;
}

/**
 * @brief 스캐쥴에서 해당 시나리오의 결과파일이 있는 서버를 가져온다. by isjo 2013-11-14
 */
int getExistedResultServer(int schedule_id, struct ST_SERVER *st_server)
{
    EXEC SQL BEGIN DECLARE SECTION;
        int     nuSCHEDULE_ID;
        varchar szSERVER_ID[10 +1];
    EXEC SQL END DECLARE SECTION;

    char strServerID[10+1];
    int server_id;
    int i;

	memset(strServerID, 0x00, sizeof(strServerID));
    memset(szSERVER_ID.arr , 0x00 , sizeof(szSERVER_ID.arr));
    
    nuSCHEDULE_ID = schedule_id;
    
    // 분석이 된 결과를 가져 온다.
    EXEC SQL
    	select DISTINCT nvl(RS.SERVER_ID, 'NULL')
    	  into :szSERVER_ID
    	  from SCHEDULE SC, ANALYSIS_RESULT RS
    	 where SC.SCENARIO_ID = RS.SCENARIO_ID
    	   and SC.SCHEDULE_ID = :nuSCHEDULE_ID
    	   and RS.SERVER_ID IS NOT NULL
    	 ;

    if(SQLCODE == SQLNOTFOUND)
    {
    	server_id = -1;
    }
    else if(SQLCODE != SQLSUCCESS)
    {
        log_error(__FFILE__, __FFUNC__, __LINE__, "SQLCODE = [%d]", SQLCODE);
        server_id = -1;
    }
    else
    {
    	memcpy( strServerID, szSERVER_ID.arr, strlen(szSERVER_ID.arr) );
    	
    	for (i = 0; i < st_server->server_cnt; i++)
    	{
    		if ( strcmp(strServerID, st_server->server_id[i]) == 0 )
    			break;
    	}
    	
    	if ( i < st_server->server_cnt )
    		server_id = i;
    	else
    		server_id = -1;
    }
    
    log_debug( __FFILE__, __FFUNC__, __LINE__, "strServerID        [%s]", strServerID );
    log_debug( __FFILE__, __FFUNC__, __LINE__, "server_id          [%d]", server_id );
	
    return server_id;
}


/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief Schedule table 정보 갱신
 */
int update_schedule(int schedule_id, char *server_id, int ru_count, int bin_x_count, int bin_y_count, int analysis_weight)
{
    EXEC SQL BEGIN DECLARE SECTION;
        varchar szSERVER_ID    [ 10 +1];
        int     nuSCHEDULE_ID          ;
        int     nuRU_CNT               ;
        int     nuBIN_X_CNT            ;
        int     nuBIN_Y_CNT            ;
        int     nuANALYSIS_WEIGHT      ;
    EXEC SQL END DECLARE SECTION;

    memset(szSERVER_ID.arr , 0x00, sizeof(szSERVER_ID.arr));
    memcpy(szSERVER_ID.arr , server_id, strlen(server_id));
    szSERVER_ID.len = strlen(server_id);

    nuSCHEDULE_ID       = schedule_id       ;
    nuRU_CNT            = ru_count          ;
    nuBIN_X_CNT         = bin_x_count       ;
    nuBIN_Y_CNT         = bin_y_count       ;
    nuANALYSIS_WEIGHT   = analysis_weight   ;

    EXEC SQL
        update SCHEDULE
           set SERVER_ID       = :szSERVER_ID       ,
               RU_CNT          = :nuRU_CNT          ,
               BIN_X_CNT       = :nuBIN_X_CNT       ,
               BIN_Y_CNT       = :nuBIN_Y_CNT       ,
               ANALYSIS_WEIGHT = :nuANALYSIS_WEIGHT
         where SCHEDULE_ID     = :nuSCHEDULE_ID
        ;

    if(SQLCODE != SQLSUCCESS)
    {
        log_error(__FFILE__, __FFUNC__, __LINE__, "SQLCODE = [%d]", SQLCODE);
        return SQLCODE;
    }
}

/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief 요청된 분석 요청에 대한 기능 가중치 계산
 */
int selectAnalysisServer(int schedule_id, int scenario_id, struct ST_ANALYSIS_WEIGHT *st_analysis_weight, struct ST_SERVER *st_server, int is_fixed)
{
    int  kind_weight, ru_count, bin_count, org_ru_count, org_bin_count, bin_x_count, bin_y_count;
    int  analysis_weight;
    int  i, max, select_server;

    // 분석종류 확인 및 가중치 계산
    computeAnalysisKind(scenario_id, &kind_weight);
    log_debug(__FFILE__, __FFUNC__, __LINE__, "kind_weight  [%d]", kind_weight );

    // RU 개수 확인
    selectRuCount(scenario_id, &ru_count);
    log_debug(__FFILE__, __FFUNC__, __LINE__, "ru_count     [%d]", ru_count    );

    // Bin 개수 확인
    selectBinCount(scenario_id, &bin_count, &bin_x_count, &bin_y_count);
    log_debug(__FFILE__, __FFUNC__, __LINE__, "bin_count    [%d]", bin_count   );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "bin_x_count  [%d]", bin_x_count   );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "bin_y_count  [%d]", bin_y_count   );

    org_ru_count  = ru_count  ;
    org_bin_count = bin_count ;
    
    // 분석 기능에 대한 가중치 계산
    if(ru_count < st_analysis_weight->ru_unit)      ru_count    = st_analysis_weight->ru_unit   ;    
    if(bin_count < st_analysis_weight->bin_unit)    bin_count   = st_analysis_weight->bin_unit  ;
    
    analysis_weight = kind_weight
            * ( (ru_count / st_analysis_weight->ru_unit * st_analysis_weight->ru_weight)
              + (bin_count / st_analysis_weight->bin_unit * st_analysis_weight->bin_weight));
                            
/*
    log_debug(__FFILE__, __FFUNC__, __LINE__, "kind_weight                    [%d]", kind_weight                    );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "ru_count                       [%d]", ru_count                       );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "st_analysis_weight->ru_unit    [%d]", st_analysis_weight->ru_unit    );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "st_analysis_weight->ru_weight  [%d]", st_analysis_weight->ru_weight  );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "(ru_count / st_analysis_weight->ru_unit * st_analysis_weight->ru_weight)   [%d]", (ru_count / st_analysis_weight->ru_unit * st_analysis_weight->ru_weight)   );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "bin_count                      [%d]", bin_count                      );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "st_analysis_weight->bin_unit   [%d]", st_analysis_weight->bin_unit   );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "st_analysis_weight->bin_weight [%d]", st_analysis_weight->bin_weight );
    log_debug(__FFILE__, __FFUNC__, __LINE__, "(bin_count / st_analysis_weight->bin_unit * st_analysis_weight->bin_weight) [%d]", (bin_count / st_analysis_weight->bin_unit * st_analysis_weight->bin_weight) );
*/
    log_debug(__FFILE__, __FFUNC__, __LINE__, "analysis_weight [%d]", analysis_weight);

    // 서버 가용 상태 확인
    getServerStatus(st_server);
    
    select_server = -1;
    
    if (is_fixed == 1)
    {
    	// 분석에서 통계 요청일 경우, 이전 분석 결과가 있는 곳에서 분석이 이루어져야 한다.
        // by isjo 2013-11-14
    	select_server = getExistedResultServer(schedule_id, st_server);
    	if (select_server != -1)
    	{
    		if( (st_server->server_grade[select_server] - st_server->total_weight[select_server]) < 0 )
    			select_server = -1;
    	}
    }
    else if (is_fixed == 2)
    {
    	log_debug(__FFILE__, __FFUNC__, __LINE__, "is_fixed = %d", is_fixed);
    	// CA 분석은 특정 서버에서만 작업 (다른 서버의 결과값에 접근할 수 있는 서버)
        // by isjo 2015-04-08
	    for(i=0; i<st_server->server_cnt; i++)
	    {
    	log_debug(__FFILE__, __FFUNC__, __LINE__, "st_server->read_only[%d] = %d", i, st_server->read_only[i]);
	    	if (st_server->read_only[i] == 2)
	    		break;
	    }
	    select_server = i;
    	log_debug(__FFILE__, __FFUNC__, __LINE__, "select_server = %d", select_server);
    }
    
    if (select_server == -1)	// by isjo 2014-01-03
    {
	    max = -99999999;
	//st_server->total_weight[1] = 150;
			
	    for(i=0; i<st_server->server_cnt; i++)
	    {
			if (st_server->read_only[i] == 1 || st_server->read_only[i] == 2)
				continue;
				
	        if((st_server->server_grade[i] - st_server->total_weight[i]) > max)
	        {
	            select_server = i;
	            max = st_server->server_grade[i] - st_server->total_weight[i];
	        }
	        log_debug(__FFILE__, __FFUNC__, __LINE__, "[server_id-%s] [server_grade-%d] [current_weight-%d] [idle_weight-%d]",
	                st_server->server_id[i],
	                st_server->server_grade[i],
	                st_server->total_weight[i],
	                st_server->server_grade[i] - st_server->total_weight[i]   );
	    }
	    
	    /* 서버별 Idle 부하가 분석 요청 부하보다 작으면 서버 미할당 */
	    if( max < 0 )
	        select_server = -1;
    }

	if (select_server != -1)
        update_schedule(schedule_id, st_server->server_id[select_server], org_ru_count, bin_x_count, bin_y_count, analysis_weight);

    log_debug(__FFILE__, __FFUNC__, __LINE__, "select_server = [%d]", select_server);

    return select_server;
}

/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief SCHEDULE테이블을 읽어 현재 수행할 일에 대한 처리를 한다.
 * 하루전 ~ 현재까지만 처리 한다.
 */
int procSchedule(struct ST_SERVER *st_server, struct ST_ANALYSIS_WEIGHT *st_analysis_weight)
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct TB_SCHEDULE tb_schedule;
        char   sqlbuf[LEN_SQL_QUERY];
    EXEC SQL END DECLARE SECTION;
/*
    struct ST_SERVER            st_server;
    struct ST_ANALYSIS_WEIGHT   st_analysis_weight;
*/
    int i, ret = 0, select_server;
    int is_fixed = 0;

    // TODO 테스트
    /*
    tb_schedule.scenario_id = 999;
    if(requestScenarioAnalysis(&tb_schedule) != SUCC) {
        return FAIL;
    }
    return SUCC;*/

    memset(sqlbuf, 0x00, sizeof(sqlbuf));

    sprintf(sqlbuf,
        "select SCHEDULE_ID             \n"
        "      ,TYPE_CD                 \n"
        "      ,SCENARIO_ID             \n"
        "      ,USER_ID                 \n"
        "      ,PRIORITIZE              \n"
        "      ,PROCESS_CD              \n"
        "      ,PROCESS_MSG             \n"
        "      ,SCENARIO_PATH           \n"
        "      ,to_char(REG_DT, 'YYYYMMDDHH24MISS')     \n"
        "      ,to_char(MODIFY_DT, 'YYYYMMDDHH24MISS')  \n"
        "  from (select row_number() over(order by TYPE_CD asc, PRIORITIZE asc, RU_CNT asc, SCHEDULE_ID asc) as ROW_NUM \n"
        "              ,SCHEDULE_ID     \n"
        "              ,TYPE_CD         \n"
        "              ,SCENARIO_ID     \n"
        "              ,USER_ID         \n"
        "              ,PRIORITIZE      \n"
        "              ,PROCESS_CD      \n"
        "              ,PROCESS_MSG     \n"
        "              ,SCENARIO_PATH   \n"
        "              ,REG_DT          \n"
        "              ,MODIFY_DT       \n"
        "              ,RU_CNT          \n"
        "          from SCHEDULE        \n"
        "         where PROCESS_CD in ('10001') \n" // -- 요청
       	// add SC104 For Geometry Query from db by isjo 2014-11-14
       	// add SC007, SC107 For CA Coverage Analisys by isjo 2015-03-16
        "           and TYPE_CD in ('SC001', 'SC002', 'SC022', 'SC003', 'SC005', 'SC007', 'SC101', 'SC104', 'SC107', 'SC021', 'SC004'/*, 'SC704'*/) \n"
        "           and RETRY_CNT <= 10 \n"
        "       )                       \n"
        " where ROW_NUM <= 10           \n"
        " order by ROW_NUM                "
    );   
    
    log_debug(__FFILE__, __FFUNC__, __LINE__, "QUERY [%s]", sqlbuf);

    EXEC SQL PREPARE pre_select_SCHEDULE FROM :sqlbuf;
    if(SQLCODE != SQLSUCCESS)
    {
        log_error(__FFILE__, __FFUNC__, __LINE__, "SQLCODE = [%d]", SQLCODE);
        return FAIL;
    }
    EXEC SQL DECLARE cur_select_SCHEDULE SCROLL CURSOR FOR pre_select_SCHEDULE;
    if(SQLCODE != SQLSUCCESS)
    {
        log_error(__FFILE__, __FFUNC__, __LINE__, "SQLCODE = [%d]", SQLCODE);
        return SQLCODE;
    }
    EXEC SQL OPEN cur_select_SCHEDULE;
    if(SQLCODE != SQLSUCCESS)
    {
        log_error(__FFILE__, __FFUNC__, __LINE__, "SQLCODE = [%d]", SQLCODE);
        return SQLCODE;
    }
/*
    // 분석서버 정보 가져오기
    ret = getServerInfo(&st_server);

    // 분석기능 가중치 환경정보 가져오기
    ret = getAnalysisWeight(&st_analysis_weight);

    getServerStatus(&st_server);

    for(i=0; i<st_server.server_cnt; i++)
    {
        log_debug(__FFILE__, __FFUNC__, __LINE__, "[server_id-%s] [server_grade-%d] [current_weight-%d] [idle_weight-%d]",
                st_server.server_id[i],
                st_server.server_grade[i],
                st_server.total_weight[i],
                st_server.server_grade[i] - st_server.total_weight[i]   );
    }
*/
    while(1)
    {
        memset(&tb_schedule, 0x00, sizeof(tb_schedule));
        EXEC SQL FETCH NEXT cur_select_SCHEDULE INTO :tb_schedule;
        if(!(SQLCODE == SQLSUCCESS || SQLCODE == SQLNOTFOUND))
        {
            // 에러처리
            log_error(__FFILE__, __FFUNC__, __LINE__, "SQLCODE = [%d]", SQLCODE);
            EXEC SQL CLOSE cur_select_SCHEDULE;
            return FAIL;
        }
        else if(SQLCODE == SQLNOTFOUND)
        {
            // no more data. 처리대상 없음
            log_debug(__FFILE__, __FFUNC__, __LINE__, "처리할 스케줄이 없습니다.");
            break;
        }
        
        	log_debug(__FFILE__, __FFUNC__, __LINE__, "2 SQLCODE = [%d]", SQLCODE);
        
        log_debug(__FFILE__, __FFUNC__, __LINE__, "schedule_id    = [%d]", tb_schedule.schedule_id  );
        log_debug(__FFILE__, __FFUNC__, __LINE__, "type_cd        = [%s]", tb_schedule.type_cd  );
        log_debug(__FFILE__, __FFUNC__, __LINE__, "scenario_id    = [%d]", tb_schedule.scenario_id  );
        log_debug(__FFILE__, __FFUNC__, __LINE__, "user_id        = [%s]", tb_schedule.user_id      );
        log_debug(__FFILE__, __FFUNC__, __LINE__, "prioritize     = [%s]", tb_schedule.prioritize   );
        log_debug(__FFILE__, __FFUNC__, __LINE__, "process_cd     = [%s]", tb_schedule.process_cd   );
/*        log_debug(__FFILE__, __FFUNC__, __LINE__, "process_msg    = [%s]", tb_schedule.process_msg  );
        log_debug(__FFILE__, __FFUNC__, __LINE__, "scenario_path  = [%s]", tb_schedule.scenario_path);*/
        log_debug(__FFILE__, __FFUNC__, __LINE__, "reg_dt         = [%s]", tb_schedule.reg_dt       );
        log_debug(__FFILE__, __FFUNC__, __LINE__, "modify_dt      = [%s]", tb_schedule.modify_dt    );

        // 분석 서버 선정하기
        is_fixed = 0;
        // 분석에서 통계 요청일 경우, 이전 분석 결과가 있는 곳에서 분석이 이루어져야 한다.
        // by isjo 2013-11-14
        if (strncmp(tb_schedule.type_cd, "SC204", 5) == 0 ||
        	strncmp(tb_schedule.type_cd, "SC003", 5) == 0 ||
        	strncmp(tb_schedule.type_cd, "SC101", 5) == 0)
        {	// 통계 낼 때는 이전에 분석된 경우가 있을 때
        	is_fixed = 1;
        }
        else if (strncmp(tb_schedule.type_cd, "SC007", 5) == 0 ||
        		 strncmp(tb_schedule.type_cd, "SC107", 5) == 0 )
        {	// CA 분석은 특정 서버에서만 작업 (다른 서버의 결과값에 접근할 수 있는 서버)
        	is_fixed = 2;
        }
        	
        select_server = selectAnalysisServer(tb_schedule.schedule_id, tb_schedule.scenario_id, st_analysis_weight, st_server, is_fixed);

        if(select_server >= 0)
        {
            // 스케줄 분석중 으로 상태 업데이트
            ret = lf_updateScheduleProcessCode(tb_schedule.schedule_id, "10002", NULL);
            if(ret != SUCC) {
                // 오류처리
                lf_updateScheduleProcessCode(tb_schedule.schedule_id, "10009", NULL);
                db_transactionCommit();
                continue;
            }
            db_transactionCommit();

            // TYPE_CD별 분기
            if(memcmp(tb_schedule.type_cd, "SC001", 5) == 0  // 분석
            || memcmp(tb_schedule.type_cd, "SC002", 5) == 0  // 틸트값구하기
            || memcmp(tb_schedule.type_cd, "SC022", 5) == 0  // 틸트적용분석
            || memcmp(tb_schedule.type_cd, "SC003", 5) == 0  // GEO-2DPROFILE
            || memcmp(tb_schedule.type_cd, "SC104", 5) == 0  // GEO-GEOMETRYQUERY FROM DB by isjo 2014-11-14
            || memcmp(tb_schedule.type_cd, "SC005", 5) == 0  // GEO-COVERAGE
            || memcmp(tb_schedule.type_cd, "SC007", 5) == 0  // CA Coverage Analisys by isjo 2015-03-16
            || memcmp(tb_schedule.type_cd, "SC107", 5) == 0  // CA Coverage GEO-GEOMETRYQUERY by isjo 2015-03-16
            || memcmp(tb_schedule.type_cd, "SC501", 5) == 0  // Swing Analysis by isjo 2015-05-28
//          || memcmp(tb_schedule.type_cd, "SC512", 5) == 0  // Find Antenna Orientation by t-map by isjo 2015-05-19
            || memcmp(tb_schedule.type_cd, "SC201", 5) == 0  // MultiBand Analysis Eng by isjo 2016-10-20
            || memcmp(tb_schedule.type_cd, "SC204", 5) == 0  // MultiBand GEO-GEOMETRYQUERY Eng by isjo 2016-10-20
            || memcmp(tb_schedule.type_cd, "SC250", 5) == 0  // MultiBand 망분리 Analysis Eng by isjo 2016-10-20
            || memcmp(tb_schedule.type_cd, "SC251", 5) == 0  // MultiBand 망분리 Swing Analysis Eng by isjo 2016-10-20
            || memcmp(tb_schedule.type_cd, "SC254", 5) == 0  // MultiBand 망분리 GEO-GEOMETRYQUERY Eng by isjo 2016-10-20
            || memcmp(tb_schedule.type_cd, "SC301", 5) == 0  // 기초사이트 설계 Swing by isjo 2017-04-24
            || memcmp(tb_schedule.type_cd, "SC101", 5) == 0 // SON-분석
            || memcmp(tb_schedule.type_cd, "SC021", 5) == 0
            || memcmp(tb_schedule.type_cd, "SC004", 5) == 0)
            {
                ret = SVC_200_1000(&tb_schedule, st_server, select_server);
            }
            else {
                log_error(__FFILE__, __FFUNC__, __LINE__, "지원하지 않는 SCHEDULE 입니다.[%d][%s]", tb_schedule.schedule_id, tb_schedule.type_cd);
                // 오류처리
                lf_updateScheduleProcessCode(tb_schedule.schedule_id, "10009", NULL);
                db_transactionCommit();
                continue;
            }

            // 분석요청
            if(ret != SUCC) {
                log_error(__FFILE__, __FFUNC__, __LINE__, "분석요청 후 에러 발생");
                // 오류처리
                lf_updateScheduleProcessCode(tb_schedule.schedule_id, "10009", NULL);
                db_transactionCommit();
                continue;
            }
            db_transactionCommit();

            // YSIC sleep(2);
        }
    }
    EXEC SQL CLOSE cur_select_SCHEDULE;

    return SUCC;
}

/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief 스케쥴 상태 업데이트
 */
int lf_updateScheduleProcessCode(int schedule_id, const char *processCd, const char *processMsg)
{
    int ret = 0;
    char sqlbuf[LEN_SQL_QUERY];
    char cond  [LEN_SQL_SUB_QUERY];
    memset(sqlbuf, 0x00, sizeof(sqlbuf));
    memset(cond, 0x00, sizeof(cond));

    if(processMsg != NULL) {
        sprintf(cond,
            ", PROCESS_MSG = '%s' "
            , processMsg
        );
    }

    sprintf(sqlbuf,
        "update SCHEDULE              \n"
        "   set MODIFY_DT   = sysdate \n"
        "      ,PROCESS_CD  = '%s'    \n"
        "       %s                    \n"
        " where SCHEDULE_ID = %d        "
        , processCd
        , cond
        , schedule_id
    );
    ret = db_executeUpdate(sqlbuf);
    log_debug(__FFILE__, __FFUNC__, __LINE__, "lf_updateScheduleProcessCode [%d][%s]", ret, sqlbuf);
    return ret;
}

/*-------------------------------------------------------------------------------------------------------------*/
/**
 * @brief 공통 헤더조립
 */
void makeInCommon(struct IO_COMMON *inCommon
                 ,int length
                 ,const char *tx_code
                 ,const char *tx_type
                 ,char *user_id)
{
    char date[LEN_DATETIME];

    memset(date, 0x00, sizeof(date));
    date_getDateTime(date, "YmdHMSU");

    memset(inCommon, 0x00, sizeof(struct IO_COMMON));
    str_rpad_n(inCommon->length , sizeof(struct IO_COMMON)+length, sizeof(inCommon->length));
    memcpy(inCommon->tx_id      , "ICP"           , 3); // 고정
    memcpy(inCommon->tx_code    , tx_code         , sizeof(inCommon->tx_code    ));
    memcpy(inCommon->tx_type    , tx_type         , sizeof(inCommon->tx_type    ));
    memcpy(inCommon->tx_day     , date            , sizeof(inCommon->tx_day     ));
    memcpy(inCommon->tx_time    , date+8          , sizeof(inCommon->tx_time    ));
    memcpy(inCommon->tx_seq     , date+8          , sizeof(inCommon->tx_seq     ));
    memset(inCommon->rx_day     , 0x30            , sizeof(inCommon->rx_day     ));
    memset(inCommon->rx_time    , 0x30            , sizeof(inCommon->rx_time    ));
    memcpy(inCommon->delimiter  , "->"            , 2);
    memset(inCommon->rx_code    , 0x30            , sizeof(inCommon->rx_code    ));
    memset(inCommon->rx_msg     , 0x20            , sizeof(inCommon->rx_msg     ));
    memset(inCommon->rx_code_dtl, 0x20            , sizeof(inCommon->rx_code_dtl));
    memset(inCommon->rx_msg_dtl , 0x20            , sizeof(inCommon->rx_msg_dtl ));
    memcpy(inCommon->user_id    , user_id         , strlen(user_id              ));
    memset(inCommon->filler     , 0x20            , sizeof(inCommon->filler     ));
}
